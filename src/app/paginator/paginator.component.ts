import { Component, OnInit, Input, OnChanges } from '@angular/core';

@Component({
  selector: 'paginator-nav',
  templateUrl: './paginator.component.html',
})
export class PaginatorComponent implements OnInit, OnChanges {
  
  /*
    paginator will hold the json generated by Spring's JPARepository. The 
    following example describe the properties that are available.
     "pageable": {
        "sort": {
            "unsorted": true,
            "sorted": false,
            "empty": true
        },
        "offset": 10,
        "pageNumber": 2,
        "pageSize": 5,
        "unpaged": false,
        "paged": true
    },
    "last": true,//Are we on the last page?
    "totalPages": 3,
    "totalElements": 14,
    "size": 5, //# of elements for each page
    "number": 2, //The current page we are currently on.
    "first": false,//Are we on the first page?
    "empty": false
  */
  @Input()
  paginator: any;

  pages: number[];
  from: number;
  to: number;
  pageSize: number = 5;

  constructor() { }

  ngOnInit() {
    this.initPaginator();
    
  }
  /*
    The right lifecycle to take the changes of this.paginator into account while this instance lives.
  */
  ngOnChanges(changes: import("@angular/core").SimpleChanges): void {
    let updatedPaginator = changes['paginator'];

    if(updatedPaginator.previousValue){
      this.initPaginator();
    }
  }

  private initPaginator(): void{
    //Ranged pages
    //Fill array with the first page numbers
    if(this.paginator){
      this.from = Math.min(Math.max(1, this.paginator.number - (this.pageSize - 1)), this.paginator.totalPages - 5);
      this.to = Math.max(Math.min(this.paginator.totalPages, this.paginator.number + (this.pageSize - 1)), 6);
      if(this.paginator.totalPages > this.pageSize){
        this.pages = new Array(this.to - this.from + 1).fill(0).map((_value, index) => index + this.from );
      } else{
        this.pages = new Array(this.paginator.totalPages).fill(0).map((_value, index) => index + 1);
      }
    }
  }
}
